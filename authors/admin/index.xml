<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bargav Jayaraman</title>
    <link>https://bargavjayaraman.github.io/authors/admin/</link>
    <description>Recent content on Bargav Jayaraman</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://bargavjayaraman.github.io/authors/admin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Xbox One X HDD Loading Test</title>
      <link>https://bargavjayaraman.github.io/post/xbox_one_x_hdd_loading_test/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/post/xbox_one_x_hdd_loading_test/</guid>
      <description>

&lt;p&gt;With the advent of 4K UHD and HDR games, it is not uncommon nowadays that your Xbox One X stock HDD of 1 TB gets filled quickly with just a handful of games. And my case is no different, within one year of purchasing the console, I already ran out of hard disk space. So I did what any gamer would do in my situation; I ordered a &lt;a href=&#34;https://www.bestbuy.com/site/seagate-expansion-4tb-external-usb-3-0-portable-hard-drive-black/4820200.p?skuId=4820200&#34; target=&#34;_blank&#34;&gt;4TB external hard drive&lt;/a&gt; [Yay!]. Now that I planned to transfer some games from my internal HDD to the external HDD, curiosity plagued the researcher in me! Is the internal HDD faster at loading games than the external HDD? Or is it the other way around? Both schools of thoughts have their own reasoning. On one hand internal HDD is, well, internal. It uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_ATA&#34; target=&#34;_blank&#34;&gt;SATA 3&lt;/a&gt; connection supporting upto 600 MB/s of bandwidth. On the other hand, external HDD uses &lt;a href=&#34;https://en.wikipedia.org/wiki/USB_3.0&#34; target=&#34;_blank&#34;&gt;USB 3.0&lt;/a&gt; connection supporting upto 625 MB/s of bandwidth. Both the hard drives have rotation speed of 5400 RPM, so it is still an apple to apple comparison.&lt;/p&gt;

&lt;p&gt;Note that this idea of comparing the loading speeds of internal and external HDDs is not novel. There are already many videos and blogs on this topic - be it for computers or consoles. What&amp;rsquo;s new in this blog is to evaluate this in a [&lt;em&gt;cough&lt;/em&gt;] scientific way - using hypothesis testing. Let&amp;rsquo;s get into a [somewhat] scientific evaluation!&lt;/p&gt;

&lt;h2 id=&#34;hypothesis-testing-on-game-loading-task&#34;&gt;Hypothesis testing on game loading task&lt;/h2&gt;

&lt;p&gt;Game loading time is measured (in &lt;em&gt;mm:ss&lt;/em&gt;) as the time taken to launch the game - from clicking on the game till the point where the player gets the control of the playable character, as shown in this &lt;a href=&#34;https://www.youtube.com/watch?v=MQ_pDLMI650&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;. I recorded the loading time for 10 AAA title games, with the exception of Forza Motorsport 7, where I recorded till the point where the main menu appears. Launching a race involves lot of manual selection process, which could add more variability in recording time.&lt;/p&gt;

&lt;p&gt;The null hypothesis is $H_0:$ &lt;em&gt;&amp;ldquo;game loading time of internal HDD is same as that of external HDD&amp;rdquo;&lt;/em&gt;, and the alternate hypothesis is $H_a:$ &lt;em&gt;&amp;ldquo;game loading time of internal HDD is not same as that of external HDD&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;experimental-observations&#34;&gt;Experimental observations&lt;/h2&gt;

&lt;p&gt;The game loading times are reported in the table below.
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Game Title&lt;/th&gt; &lt;th&gt;Internal HDD Time &lt;br&gt;(&lt;i&gt;mm:ss&lt;/i&gt;)&lt;/th&gt; &lt;th&gt;External HDD Time &lt;br&gt;(&lt;i&gt;mm:ss&lt;/i&gt;)&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Assassin&amp;rsquo;s Creed Origins&lt;/td&gt; &lt;td&gt;01:48.50&lt;/td&gt; &lt;td&gt;01:51.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Tomb Raider&lt;/td&gt; &lt;td&gt;00:50.95&lt;/td&gt; &lt;td&gt;00:41.78&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Rise of Tomb Raider&lt;/td&gt; &lt;td&gt;02:32.14&lt;/td&gt; &lt;td&gt;02:15.54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Shadow of Tomb Raider&lt;/td&gt; &lt;td&gt;01:36.63&lt;/td&gt; &lt;td&gt;01:24.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Halo Master Chief Collection&lt;/td&gt; &lt;td&gt;00:57.29&lt;/td&gt; &lt;td&gt;00:46.89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Batman: Arkham Assylum&lt;/td&gt; &lt;td&gt;01:09.88&lt;/td&gt; &lt;td&gt;01:03.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Batman: Arkham City&lt;/td&gt; &lt;td&gt;01:13.94&lt;/td&gt; &lt;td&gt;01:12.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Batman: Arkham Knight&lt;/td&gt; &lt;td&gt;01:39.64&lt;/td&gt; &lt;td&gt;01:36.14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Forza Horizon 4&lt;/td&gt; &lt;td&gt;02:33.74&lt;/td&gt; &lt;td&gt;02:04.31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Forza Motorsport 7&lt;/td&gt; &lt;td&gt;01:00.00&lt;/td&gt; &lt;td&gt;00:50.69&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Since there is a one-to-one correspondence of each game, we can use &lt;a href=&#34;https://www.statisticshowto.datasciencecentral.com/probability-and-statistics/t-test/&#34; target=&#34;_blank&#34;&gt;paired sample T-test&lt;/a&gt;.
We can calculate the $t$-value for the paired sample T-test using a simple formula:&lt;/p&gt;

&lt;p&gt;$t-value = \frac{D_1 / N}{\sqrt{\frac{D_2 - D_1^2 / N}{N(N-1)}}}$&lt;/p&gt;

&lt;p&gt;Where $N$ is the total number of games ($N = 10$), $D_1$ is the total difference between loading times of internal and external HDDs ($D_1 = 96.71$) and $D_2$ is the total squared difference between loading times of internal and external HDDs ($D_2 = 1641.4153$). The calculated $t$-value comes out to be 3.4526 which is greater than the threshold $t$-value of 3.250 for a significance threshold of 0.005. Hence we can reject the null hypothesis $H_0$ with 99.5% confidence and conclude that [&lt;em&gt;my&lt;/em&gt;] external HDD is faster than the internal HDD of [&lt;em&gt;my&lt;/em&gt;] Xbox One X.&lt;/p&gt;

&lt;h2 id=&#34;disclaimer-on-the-validity-of-results&#34;&gt;Disclaimer on the validity of results&lt;/h2&gt;

&lt;p&gt;The above results are for a single loading of each game, and the loading time might vary by a few seconds across multiple runs. Ideally, average loading time should be used for such experiments. However, it should be noted that if the same game is loaded multiple times, the consequent loading will be faster due to &lt;em&gt;memory caching&lt;/em&gt;. To avoid caching, games should be loaded in an alternative fashion. Finally, it is important to put a disclaimer that the reported results are for my hardware, and these results &lt;em&gt;might&lt;/em&gt; vary for others. So take it with a grain of salt! :P&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Keeping the above disclaimer in mind, I conclude that my external HDD loads games faster than the stock HDD of my Xbox One X. This benefit might be attributed to the extra 25 MB/s bandwidth of USB 3.0 interface used by the external HDD.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluating Differentially Private Machine Learning in Practice</title>
      <link>https://bargavjayaraman.github.io/publication/evaluating-dpml/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/publication/evaluating-dpml/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/JAGhqbY_U50&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Distributed Learning without Distress: Privacy-Preserving Empirical Risk Minimization</title>
      <link>https://bargavjayaraman.github.io/publication/dp-erm/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/publication/dp-erm/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/rwyWiDyVmjE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Why you should evaluate your private model</title>
      <link>https://bargavjayaraman.github.io/post/evaluating-dpml-intro/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/post/evaluating-dpml-intro/</guid>
      <description>

&lt;p&gt;Privacy concerns arise when training machine learning models over sensitive data such as personal information about individuals. These concerns become more serious when the trained models are publicly deployed as a service. While differential privacy can alleviate these privacy concerns, it is highly sensitive to the implementation choices such as the privacy budget and the type of differential privacy relaxation used. In our paper (to appear in USENIX Securityâ€™19), we experimentally evaluate the impact of these implementation choices on the privacy leakage. More concretely, we quantify how much information is leaked to the adversary.&lt;/p&gt;

&lt;p&gt;The following fictional scenario illustrates the privacy concerns and the risks involved in publicly deploying models without properly analysing the differential privacy implementation choices.&lt;/p&gt;

&lt;h1 id=&#34;the-quickservice-bank-scenario&#34;&gt;The QuickService Bank Scenario&lt;/h1&gt;

&lt;p&gt;When you go to a bank for a personal loan, the approval process often takes &lt;a href=&#34;https://studentloanhero.com/featured/how-long-does-it-take-to-get-approved-for-a-personal-loan/&#34; target=&#34;_blank&#34;&gt;from a day or two to a couple of weeks&lt;/a&gt;. However the QuickService Bank, living up to its name, launched an online service where you could enter your personal details and get an instant loan approval. The workhorse behind this quick service is their state-of-the-art machine learning model trained on the bankâ€™s existing customer data.&lt;/p&gt;







&lt;figure&gt;

&lt;img src=&#34;img/quickservicebank_scenario.png&#34; &gt;


&lt;/figure&gt;


&lt;h2 id=&#34;what-went-wrong&#34;&gt;What went wrong?&lt;/h2&gt;

&lt;p&gt;The online loan approval service earned great popularity and brought in more business for QuickService Bank. But the bankâ€™s joy didnâ€™t last for long. Mandark, a notorious black-hat hacker, prowled on the online service and started leaking the identity of the bankâ€™s customers. This type of attack is called &lt;a href=&#34;https://ieeexplore.ieee.org/document/7958568&#34; target=&#34;_blank&#34;&gt;membership inference&lt;/a&gt; where the attacker identifies the presence or absence of a record in the training data.






&lt;figure&gt;

&lt;img src=&#34;img/mandark_attack.png&#34; &gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;differential-privacy-to-the-rescue&#34;&gt;Differential privacy to the rescue!&lt;/h2&gt;

&lt;p&gt;Dismayed by the attack, QuickService Bank temporarily disabled the online service and hired Dexter who is a security expert. Dexter learns about &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/differential-privacy/?from=http%3A%2F%2Fresearch.microsoft.com%2Fpubs%2F64346%2Fdwork.pdf&#34;&gt;differential privacy&lt;/a&gt; and decides to deploy it for privately training the bankâ€™s loan approval model while still prioritizing the modelâ€™s accuracy. But due to the modelâ€™s complexity, the required privacy budget turned out to be 1000.






&lt;figure&gt;

&lt;img src=&#34;img/dexter_dp.png&#34; &gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;





&lt;figure&gt;

&lt;img src=&#34;img/dexter_rdp.png&#34; &gt;


&lt;/figure&gt;

Dexter, knowing that such a high budget might not be desirable for strong privacy, uses relaxed definitions (&lt;a href=&#34;https://arxiv.org/abs/1603.01887&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/1605.02065&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/1702.07476&#34;&gt;here&lt;/a&gt;) to reduce the budget to 10 without compromising on the model accuracy. Happy with his privacy implementation, Dexter asked QuickService Bank to make the service online again.&lt;/p&gt;

&lt;h2 id=&#34;again-what-went-wrong&#34;&gt;Againâ€¦ what went wrong?&lt;/h2&gt;

&lt;p&gt;Though the differential privacy safeguard reduced Mandarkâ€™s attack success rate, he was still able to reveal the membership information of a few bank customers. Why did this happen? While the relaxed definitions allows the reduction in privacy budget, the amount of noise added in the model training remains the same. Thus, the effective privacy is the same as provided by differential privacy with high privacy budget.&lt;/p&gt;

&lt;p&gt;In the next post, we will further explore this observation through empirical evaluation on real world data sets.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detecting Vague Words and Phrases in Requirements Documents in a Multilingual Environment</title>
      <link>https://bargavjayaraman.github.io/publication/vagueness/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/publication/vagueness/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Decentralized Certificate Authorities</title>
      <link>https://bargavjayaraman.github.io/publication/dca/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/publication/dca/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aggregating Private Sparse Learning Models Using Multi-Party Computation</title>
      <link>https://bargavjayaraman.github.io/publication/model-aggregation/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/publication/model-aggregation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Preserving String Matching for Cloud Computing</title>
      <link>https://bargavjayaraman.github.io/publication/searchable-encryption/</link>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/publication/searchable-encryption/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://bargavjayaraman.github.io/authors/admin/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bargavjayaraman.github.io/authors/admin/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently doing PhD in Computer Science at School of Engineering and Applied Science, University of Virginia. I am advised by &lt;a href=&#34;https://www.cs.virginia.edu/~evans/&#34; target=&#34;_blank&#34;&gt;Professor David Evans&lt;/a&gt; and my area of research is broadly in &lt;a href=&#34;https://oblivc.org/ppml/&#34; target=&#34;_blank&#34;&gt;Privacy Preserving Machine Learning&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
