[{"authors":["admin"],"categories":null,"content":"I\u0026rsquo;m currently doing PhD in Computer Science at School of Engineering and Applied Science, University of Virginia. I am advised by Professor David Evans and my area of research is broadly in Privacy Preserving Machine Learning.\n","date":1589155200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1589155200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://bargavjayaraman.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I\u0026rsquo;m currently doing PhD in Computer Science at School of Engineering and Applied Science, University of Virginia. I am advised by Professor David Evans and my area of research is broadly in Privacy Preserving Machine Learning.","tags":null,"title":"Bargav Jayaraman","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://bargavjayaraman.github.io/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["Katherine Knipmeyer"],"categories":[],"content":" Machine learning poses a substantial risk that adversaries will be able to discover information that the model does not intend to reveal. One set of methods by which consumers can learn this sensitive information, known broadly as membership inference attacks, predicts whether or not a query record belongs to the training set. A basic membership inference attack involves an attacker with a given record and black-box access to a model who tries to determine whether said record was a member of the model\u0026rsquo;s training set.\nUnlike much of the existing research on the membership inference, though, these particular results focus on what are considered \u0026ldquo;realistic assumptions,\u0026rdquo; including conditions with skewed priors (wherein members only make up a small fraction of the candidate pool) and conditions with adversaries that select accuracy-improving inference thresholds based on specific attack goals. These new assumptions help to answer the question of how differential privacy can be implemented to provide meaningful privacy guarantees in practice.\n\nThreshold Selection In order to classify a record as either a member or a non-member, there must be a threshold that converts a real number output from a test into a Boolean. We develop a procedure to select a threshold, \u0026phi;, that allows the adversary to achieve as much privacy leakage as possible while staying beneath a maximum false positive rate, \u0026alpha;.\nThis selection procedure can be applied to any membership inference attack, including Yeom\u0026rsquo;s attack. The original version of this attack classifies a record as a member if its per-instance-loss is less than the expected training loss, whereas this new approach selects members based on a threshold \u0026phi;, which can be set to target a particular false positive rate.\n \nThe Merlin Attack In addition to this new selection procedure, we introduce a new attack known as Merlin, which stands for MEasuring Relative Loss In Neighborhood. Instead of per-instance-loss, this attack uses the direction of change of per-instance-loss when the record is slightly perturbed with noise. Merlin operates based on the intuition that, as a result of overfitting, member records are more likely to be near local minima than non-member records. This suggests that for members, loss is more likely to increase at perturbed points near the original, whereas it is equally likely to increase or decrease for non-members. For each record, a small amount of random Gaussian noise is added and the change of loss direction is recorded. This process is repeated multiple times and Merlin infers membership based on the fraction of times the loss increases.\n \nThe Morgan Attack Since Yeom and Merlin use different information to make their membership inferences, they do not always identify the same records as members; some members are more vulnerable to one attack than the other. Visualizing a combination of the attacks\u0026rsquo; results suggests that by eliminating the results with a very low per-instance-loss, a combination of the two may produce an improved PPV. The intuition here is that extremely low per-instance-losses may result in Merlin\u0026rsquo;s identification of a local minimum where there is in fact a near global minimum (which is much less strongly correlated with membership).\nThe Morgan (Measuring lOss, Relatively Greater Around Neighborhood) attack uses three different thresholds: a lower threshold on per-instance loss (\u0026phi;L), an upper threshold on per-instance loss (\u0026phi;U), and a threshold on the ratio as used by Merlin (\u0026phi;M). If a record has a per-instance-loss that falls between \u0026phi;L and \u0026phi;U, and has a Merlin ratio of at least \u0026phi;M, Morgan identifies it as a member.\n The figure shows the per-instance loss and Merlin ratio for Purchase-100X (and expanded version of the Purchase-100 dataset that we created for our experiments). Members and nonmembers are denoted by orange and purple points respectively. The boxes show the thresholds found by the threshold selection process (without access to the training data, but with the same data distribution), and illustrate the regions where members are identified by Morgan with very high confidence (PPV \u0026sim;1). (See paper for details, and more result.) \n\nImbalanced Priors Previous work on membership inference attacks assumes a candidate pool where half of the candidates are members. For most settings, especially ones where there is a serious privacy risk for an individual of being identified as a dataset member, this assumption is unrealistic. It is important to understand how well inference attacks work when the adversary\u0026rsquo;s candidate pool has a different prior probability of being amember.\n \nHere, the candidate pool from which the attacker attempts to select members has \u0026gamma; times more non-member records than member records. As shown above, even in situations that other papers do not consider, wherein there are many times more non-members than members, attacks are able to attain a high rate of positively-identified members.\nConclusion The Merlin and Morgan attacks can reliably identify members even in situations with imbalanced priors where other attacks fail to show meaningful inference risk.\nThere remains a large gap between what can be guaranteed using differential privacy methods, and what can be inferred using known inference attacks. This means better inference attacks may exist, and our results show that there are concrete ways to improve attacks (e.g., our threshold-selection procedure) and to incorporate more information to improve attacks. We are especially interested in attacks that produce extremely high PPVs, even if this is only for a small fraction of candidates, since for most scenarios this is where the most serious privacy risks lie.\nFull paper: Bargav Jayaraman, Lingxiao Wang, Katherine Knipmeyer, Quanquan Gu, David Evans. Revisiting Membership Inference Under Realistic Assumptions (arXiv).\nCode: https://github.com/bargavj/EvaluatingDPML\n","date":1601596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601596800,"objectID":"6c6843ab481d4a6a1ddae1e6cce5d508","permalink":"https://bargavjayaraman.github.io/post/revisiting-mi/","publishdate":"2020-10-02T00:00:00Z","relpermalink":"/post/revisiting-mi/","section":"post","summary":"Membership inference attacks are effective even for skewed priors.","tags":["Machine Learning","Differential Privacy"],"title":"Merlin, Morgan, and the Importance of Thresholds and Priors","type":"post"},{"authors":["Bargav Jayaraman","Lingxiao Wang","Katherine Knipmeyer","David Evans","Quanquan Gu"],"categories":null,"content":"","date":1589155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589155200,"objectID":"300254b24d492aa3aaad2edb3cc1a4c3","permalink":"https://bargavjayaraman.github.io/publication/revisiting-mi/","publishdate":"2020-06-21T00:00:00Z","relpermalink":"/publication/revisiting-mi/","section":"publication","summary":"We propose novel membership inference attack and a threshold selection procedure to improve the existing attacks.","tags":["Machine Learning","Differential Privacy"],"title":"Revisiting Membership Inference Under Realistic Assumptions","type":"publication"},{"authors":["Bargav Jayaraman"],"categories":[],"content":" With the advent of 4K UHD and HDR games, it is not uncommon nowadays that your Xbox One X stock HDD of 1 TB gets filled quickly with just a handful of games. And my case is no different, within one year of purchasing the console, I already ran out of hard disk space. So I did what any gamer would do in my situation; I ordered a 4TB external hard drive [Yay!]. Now that I planned to transfer some games from my internal HDD to the external HDD, curiosity plagued the researcher in me! Is the internal HDD faster at loading games than the external HDD? Or is it the other way around? Both schools of thoughts have their own reasoning. On one hand internal HDD is, well, internal. It uses SATA 3 connection supporting upto 600 MB/s of bandwidth. On the other hand, external HDD uses USB 3.0 connection supporting upto 625 MB/s of bandwidth. Both the hard drives have rotation speed of 5400 RPM, so it is still an apple to apple comparison.\nNote that this idea of comparing the loading speeds of internal and external HDDs is not novel. There are already many videos and blogs on this topic - be it for computers or consoles. What\u0026rsquo;s new in this blog is to evaluate this in a [cough] scientific way - using hypothesis testing. Let\u0026rsquo;s get into a [somewhat] scientific evaluation!\nHypothesis testing on game loading task Game loading time is measured (in mm:ss) as the time taken to launch the game - from clicking on the game till the point where the player gets the control of the playable character, as shown in this video. I recorded the loading time for 10 AAA title games, with the exception of Forza Motorsport 7, where I recorded till the point where the main menu appears. Launching a race involves lot of manual selection process, which could add more variability in recording time.\nThe null hypothesis is $H_0:$ \u0026ldquo;game loading time of internal HDD is same as that of external HDD\u0026rdquo;, and the alternate hypothesis is $H_a:$ \u0026ldquo;game loading time of internal HDD is not same as that of external HDD\u0026rdquo;.\nExperimental observations The game loading times are reported in the table below.   Game Title Internal HDD Time (mm:ss) External HDD Time (mm:ss)   Assassin\u0026rsquo;s Creed Origins 01:48.50 01:51.05   Tomb Raider 00:50.95 00:41.78   Rise of Tomb Raider 02:32.14 02:15.54   Shadow of Tomb Raider 01:36.63 01:24.30   Halo Master Chief Collection 00:57.29 00:46.89   Batman: Arkham Assylum 01:09.88 01:03.00   Batman: Arkham City 01:13.94 01:12.30   Batman: Arkham Knight 01:39.64 01:36.14   Forza Horizon 4 02:33.74 02:04.31   Forza Motorsport 7 01:00.00 00:50.69  \nSince there is a one-to-one correspondence of each game, we can use paired sample T-test. We can calculate the $t$-value for the paired sample T-test using a simple formula:\n$t-value = \\frac{D_1 / N}{\\sqrt{\\frac{D_2 - D_1^2 / N}{N(N-1)}}}$\nWhere $N$ is the total number of games ($N = 10$), $D_1$ is the total difference between loading times of internal and external HDDs ($D_1 = 96.71$) and $D_2$ is the total squared difference between loading times of internal and external HDDs ($D_2 = 1641.4153$). The calculated $t$-value comes out to be 3.4526 which is greater than the threshold $t$-value of 3.250 for a significance threshold of 0.005. Hence we can reject the null hypothesis $H_0$ with 99.5% confidence and conclude that [my] external HDD is faster than the internal HDD of [my] Xbox One X.\nDisclaimer on the validity of results The above results are for a single loading of each game, and the loading time might vary by a few seconds across multiple runs. Ideally, average loading time should be used for such experiments. However, it should be noted that if the same game is loaded multiple times, the consequent loading will be faster due to memory caching. To avoid caching, games should be loaded in an alternative fashion. Finally, it is important to put a disclaimer that the reported results are for my hardware, and these results might vary for others. So take it with a grain of salt! :P\nConclusion Keeping the above disclaimer in mind, I conclude that my external HDD loads games faster than the stock HDD of my Xbox One X. This benefit might be attributed to the extra 25 MB/s bandwidth of USB 3.0 interface used by the external HDD.\n","date":1575763200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575763200,"objectID":"a457edc457c5223ef4a4d3ddbf0148e6","permalink":"https://bargavjayaraman.github.io/post/xbox_one_x_hdd_loading_test/","publishdate":"2019-12-08T00:00:00Z","relpermalink":"/post/xbox_one_x_hdd_loading_test/","section":"post","summary":"A hypothesis testing approach to evaluate the Xbox One X HDD.","tags":["Gaming","Hypothesis Testing"],"title":"Xbox One X HDD Loading Test","type":"post"},{"authors":["Lingxiao Wang","Bargav Jayaraman","David Evans","Quanquan Gu"],"categories":null,"content":"","date":1572393600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572393600,"objectID":"061d940b2dfb8686c61e079d511517a8","permalink":"https://bargavjayaraman.github.io/publication/nonconvex-optimization/","publishdate":"2020-07-11T00:00:00Z","relpermalink":"/publication/nonconvex-optimization/","section":"publication","summary":"We propose differentially private algorithm for non-convex empirical risk minimization with reduced gradient complexity.","tags":["Machine Learning","Differential Privacy","Multi-Party Computation"],"title":"Efficient Privacy-Preserving Nonconvex Optimization","type":"publication"},{"authors":["Bargav Jayaraman","David Evans"],"categories":null,"content":"   ","date":1565740800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565740800,"objectID":"dfe415f9221ca90a8c21e033a460e014","permalink":"https://bargavjayaraman.github.io/publication/evaluating-dpml/","publishdate":"2019-07-14T00:00:00Z","relpermalink":"/publication/evaluating-dpml/","section":"publication","summary":"We compare the privacy leakage of ML models trained with different differential privacy relaxations and different privacy budgets.","tags":["Machine Learning","Differential Privacy"],"title":"Evaluating Differentially Private Machine Learning in Practice","type":"publication"},{"authors":["Bargav Jayaraman","Lingxiao Wang","David Evans","Quanquan Gu"],"categories":null,"content":"   ","date":1563062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563062400,"objectID":"8839ba473dcace6e2a0448973ea7788d","permalink":"https://bargavjayaraman.github.io/publication/dp-erm/","publishdate":"2019-07-14T00:00:00Z","relpermalink":"/publication/dp-erm/","section":"publication","summary":"We combine differential privacy and MPC for privacy preserving distributed learing of strongly-convex ERM algorithms.","tags":["Machine Learning","Differential Privacy","Multi-Party Computation"],"title":"Distributed Learning without Distress: Privacy-Preserving Empirical Risk Minimization","type":"publication"},{"authors":["Bargav Jayaraman"],"categories":[],"content":" With the recent advances in composition of differential private mechanisms, the research community has been able to achieve meaningful deep learning with privacy budgets in single digits. R\u0026#x00E8;nyi differential privacy (RDP) is one mechanism that provides tighter composition which is widely used because of its implementation in TensorFlow Privacy (recently, Gaussian differential privacy (GDP) has shown a tighter analysis for low privacy budgets, but it was not yet available when we did this work). But the central question that remains to be answered is: how private are these methods in practice?\nIn this blog post, we answer this question by empirically evaluating the privacy leakage of differential private neural networks via membership inference attacks. This work appeared in USENIX Security\u0026rsquo;19 (full paper: PDF, talk video).\nTraining Differentially Private Models We train two-layer neural network models using a training procedure similar to the popular DPSGD procedure. The training and test sets consist of seperate 10,000 instances randomly sampled from the CIFAR-100 data set.\nThe figure below shows the accuracy loss of private models trained with na\u0026#x00EF;ve composition (NC) and R\u0026#x00E8;nyi differential privacy (RDP) with respect to a non-private model. As expected, models trained with RDP achieve much better utility when compared to the models trained with NC. To give a comparison, models trained with RDP achieve 53% accuracy loss at \\(\\epsilon = 10\\), whereas the models trained with NC achieve the same utility at \\(\\epsilon = 500\\). Due to the tighter composition, RDP mechanism adds much lesser noise when compared to NC mechanism for the same privacy budget.\nThis is great, but what about the privacy leakage?   Privacy comes at a cost To estimate privacy leakage, we implement the membership inference attack of Yeom et al and use their membership advantage metric, which is given as the difference between true positive rate (TPR) and false positive rate (FPR) of detecting whether a given instance is a part of the training set. This metric lies between 0 and 1, where 0 signifies no privacy leakage.\nAs the figure below depicts, there is a clear trade-off between privacy and utility. While the RDP mechanism achieves higher utility, it also suffers from higher privacy leakage. The attack achieves around 0.40 membership advantage score against model trained with RDP at \\(\\epsilon = 1000\\), with a positive predictive value (PPV) of 74%. While this is less than the privacy leakage of non-private model (highlighted in the figure below), it is a significant amount of leakage. On the other hand, the model has almost no utility at lower privacy budgets where the privacy leakage is low.   A more interesting observation is that we only have tight theoretical worst case guarantees on membership advantage for \\(\\epsilon \u0026lt; 1\\), at which point the models neither have any utility nor have any empirical privacy leakage. While the attacks only give a lower bound on the privacy leakage, the huge gap between the theoretical upper bound and the empirical lower bound suggests that there could be stronger attacks in practice.\nLeakage is not random We have shown above that the membership inference attack can be effective against a model trained with RDP at \\(\\epsilon = 1000\\). The members identified by the attacker are not due to the randomness in machine learning process. To show this, we run run the above experiment multiple times and note the fraction of members that are repeatedly identified across different runs. The figure below shows the results. The attacker is able to identify almost a quarter of the training records with more than 82% PPV across five runs. If the leakage was due to the randomness, we would have expected a trend similar to the dotted line.   Conclusion The differential privacy research community has come a long way to realize practical mechanisms for privacy-preserving deep learning. However, as shown in our work, we still require significant improvements to achieve meaningful utility for privacy budgets where we have strong theoretical guarantees. Concurrently, the huge gap between the empirical privacy leakage and the theoretical bounds opens the possibility for more powerful inference attacks in practice.\nAdditional Results in the Paper While we only discussed selected results in this blog post, the full paper has more experimental results across different settings as listed below:\n Results on Purchase-100 data set, derived from Kaggle website.\n Results for logistic regression model.\n Membership inference attack of Shokri et al..\n Attribute inference attack of Yeom et al.\n  ","date":1562544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563062400,"objectID":"d4f65315eedde1125cbb93ee246943cd","permalink":"https://bargavjayaraman.github.io/post/evaluating-dpml-results/","publishdate":"2019-07-08T00:00:00Z","relpermalink":"/post/evaluating-dpml-results/","section":"post","summary":"What seems safe, might not be safe in practice.","tags":["Machine Learning","Differential Privacy"],"title":"Evaluating Differentially Private Machine Learning in Practice","type":"post"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://bargavjayaraman.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Machine learning models are being extensively trained on sensitive human data (such as pictures, videos and patient health records) and are being publicly deployed as a service. With such systems in place, privacy of the individuals involved in the model training becomes a real concern. While differential privacy provides a solution to this problem, there is always a privacy-utility trade-off when training models privately, which is not well understood. Often the practical deployments choose the model utility over privacy, that may lead to indiscernable privacy vulnerabilities. One such example of privacy vulnerability is whether an adversary can identify a particular individual in the training data. Also, what type of individuals are more vulnerable to such attacks? This question is also directly related to the problem of fairness. In light of such vulnerabilities, what privacy parameters should the ML deployments use to mitigate the risks? Our project tries to shed light on these questions.\n","date":1534896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1534896000,"objectID":"431a6ad5dce7909fddd6b983c1885b98","permalink":"https://bargavjayaraman.github.io/project/evaluating-dpml/","publishdate":"2018-08-22T00:00:00Z","relpermalink":"/project/evaluating-dpml/","section":"project","summary":"Comparing the differential privacy implementations by quantifying their privacy leakage.","tags":["Machine Learning","Differential Privacy"],"title":"Analysis of Private ML Models","type":"project"},{"authors":["Breno Cruz","Bargav Jayaraman","Anurag Dwarakanath","Collin McMillan"],"categories":null,"content":"","date":1505001600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505001600,"objectID":"8a24791c6f6810846d2265ce6f09fb86","permalink":"https://bargavjayaraman.github.io/publication/vagueness/","publishdate":"2019-07-14T00:00:00Z","relpermalink":"/publication/vagueness/","section":"publication","summary":"We identify vague terms across English, Portuguese and Spanish software requirement documents.","tags":["Machine Learning","NLP"],"title":"Detecting Vague Words and Phrases in Requirements Documents in a Multilingual Environment","type":"publication"},{"authors":["Bargav Jayaraman"],"categories":null,"content":"","date":1497139200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497139200,"objectID":"5ee9891db5c898e661e43f2d6cc568db","permalink":"https://bargavjayaraman.github.io/publication/dca/","publishdate":"2019-07-14T00:00:00Z","relpermalink":"/publication/dca/","section":"publication","summary":"We use MPC to allow certificate authorities to sign digital certificates in a secure and distributed way.","tags":["Multi-Party Computation","Certificate Authority"],"title":"Decentralized Certificate Authorities","type":"publication"},{"authors":null,"categories":null,"content":"Certificate authorities have a single point of failure in signing the digital certificates \u0026ndash; what if their signing key gets stolen? This is possible if the signing key is stored on a single machine. Instead, we propose secret sharing of signing keys across multiple machines such that the certificate authorites can combine the secret shares within the multi-party computation protocol and sign the digital certificate in an encrypted way.\n","date":1490572800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490572800,"objectID":"919dceae5a73bcf56a585994e38b493c","permalink":"https://bargavjayaraman.github.io/project/dca/","publishdate":"2017-03-27T00:00:00Z","relpermalink":"/project/dca/","section":"project","summary":"Allowing certificate authorities to sign digital certificates in a secure and distributed way.","tags":["Multi-Party Computation","Certificate Authority"],"title":"Decentralized Certificate Authorities","type":"project"},{"authors":["Lu Tian","Bargav Jayaraman","Quanquan Gu","David Evans"],"categories":null,"content":"","date":1480809600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480809600,"objectID":"962c098dd5040bb0c74ff379016183dc","permalink":"https://bargavjayaraman.github.io/publication/model-aggregation/","publishdate":"2019-07-14T00:00:00Z","relpermalink":"/publication/model-aggregation/","section":"publication","summary":"We use MPC to aggregate models in a private and distributed way.","tags":["Machine Learning","Multi-Party Computation"],"title":"Aggregating Private Sparse Learning Models Using Multi-Party Computation","type":"publication"},{"authors":null,"categories":null,"content":"Multi-party computation protocols provide computational security to both data and model through encrypted computations. Differential privacy, on the other hand, provides information theoretic privacy by perturbing the computations with noise. These techniques consider a different threat model and have orthogonal goals. In this project, we combine both technuqies to achieve strong security and privacy for machine learning on sensitive data.\n","date":1472860800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1472860800,"objectID":"4a599d72a840540e47f82589c2d6cffc","permalink":"https://bargavjayaraman.github.io/project/ppml/","publishdate":"2016-09-03T00:00:00Z","relpermalink":"/project/ppml/","section":"project","summary":"Combining differential privacy and multi-party computation techniques for private machine learning.","tags":["Machine Learning","Differential Privacy","Multi-Party Computation"],"title":"Privacy Preserving Machine Learning","type":"project"},{"authors":["Bruhadeshwar Bezawada","Alex X. Liu","Bargav Jayaraman","Ann L. Wang","Rui Li"],"categories":null,"content":"","date":1435536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1435536000,"objectID":"db77a4249880bcf14348effa1248ec22","permalink":"https://bargavjayaraman.github.io/publication/searchable-encryption/","publishdate":"2019-07-14T00:00:00Z","relpermalink":"/publication/searchable-encryption/","section":"publication","summary":"We use MPC to allow certificate authorities to sign digital certificates in a secure and distributed way.","tags":["Searchable Encryption"],"title":"Privacy Preserving String Matching for Cloud Computing","type":"publication"}]